@using WorldCup.Common.Entities
@using WorldCup.Extensions
@model Match

@{
    ViewBag.Title = "Edit match details";
}

<div class="page-header">
    <h1>
        Edit match details<br />
        <small>@Model.HomeTeam.Name vs @Model.AwayTeam.Name</small>
    </h1>
</div>

<p>Use this form to edit a match. Make sure you use the correct date and time: it should be in <a href="http://www.worldtimeserver.com/current_time_in_UTC.aspx" target="_blank">UTC</a>.</p>
<hr />
@using (Html.BeginForm("Edit", "AdminMatches", FormMethod.Post, new { role = "form", @class = "form-horizontal" }))
{
    @Html.HiddenFor(m => m.Id)
    @Html.HiddenFor(m => m.HomeTeamId)
    @Html.HiddenFor(m => m.AwayTeamId)

    @Html.ValidationSummary()

    <div class="form-group">
        @Html.LabelFor(m => m.State, new { @class = "col-sm-3 control-label" })
        <div class="col-sm-3">
            @Html.EnumDropDownListFor(m => m.State, new { @class = "form-control" })
        </div>
        <div class="col-sm-2">@Html.ValidationMessageFor(m => m.State)</div>
        <div class="col-sm-4"><abbr title="Invisible to the users." class="initialism">Created</abbr>&nbsp;<abbr title="Open to make predictions for the participants." class="initialism">Visible for Predictions</abbr>&nbsp;<abbr title="After the match is played and when all the data can be entered. This operation cannot be undone." class="initialism">Finalized</abbr></div>
    </div>
    <div class="form-group">
        @Html.LabelFor(m => m.Date, new { @class = "col-sm-3 control-label" })
        <div class="col-sm-3">
            @Html.EditorFor(m => m.Date, "_DateTime")
        </div>
        <div class="col-sm-2">@Html.ValidationMessageFor(m => m.Date)</div>
        <div class="col-sm-4"><span class="label label-danger">The date and time should be UTC</span></div>
    </div>
    <div class="form-group">
        <div class="col-sm-12">
            &nbsp;
        </div>
    </div>
    <div class="form-group">
        @Html.LabelFor(m => m.HomeTeamHalfTimeGoals, string.Format("{0} half time goals", Model.HomeTeam.Name), new { @class = "col-sm-3 control-label" })
        <div class="col-sm-3">
            @Html.BootstrapEditorFor(m => m.HomeTeamHalfTimeGoals, Model.State != MatchState.Finalized)
        </div>
        <div class="col-sm-2">@Html.ValidationMessageFor(m => m.HomeTeamHalfTimeGoals)</div>
        <div class="col-sm-4"></div>
    </div>
    <div class="form-group">
        @Html.LabelFor(m => m.AwayTeamHalfTimeGoals, string.Format("{0} half time goals", Model.AwayTeam.Name), new { @class = "col-sm-3 control-label" })
        <div class="col-sm-3">
            @Html.BootstrapEditorFor(m => m.AwayTeamHalfTimeGoals, Model.State != MatchState.Finalized)
        </div>
        <div class="col-sm-2">@Html.ValidationMessageFor(m => m.AwayTeamHalfTimeGoals)</div>
        <div class="col-sm-4"></div>
    </div>
    <div class="form-group">
        @Html.LabelFor(m => m.HomeTeamFullTimeGoals, string.Format("{0} full time goals", Model.HomeTeam.Name), new { @class = "col-sm-3 control-label" })
        <div class="col-sm-3">
            @Html.BootstrapEditorFor(m => m.HomeTeamFullTimeGoals, Model.State != MatchState.Finalized)
        </div>
        <div class="col-sm-2">
            @Html.ValidationMessageFor(m => m.HomeTeamFullTimeGoals)
        </div>
        <div class="col-sm-4"></div>
    </div>
    <div class="form-group">
        @Html.LabelFor(m => m.AwayTeamFullTimeGoals, string.Format("{0} full time goals", Model.AwayTeam.Name), new { @class = "col-sm-3 control-label" })
        <div class="col-sm-3">
            @Html.BootstrapEditorFor(m => m.AwayTeamFullTimeGoals, Model.State != MatchState.Finalized)
        </div>
        <div class="col-sm-2">@Html.ValidationMessageFor(m => m.AwayTeamFullTimeGoals)</div>
        <div class="col-sm-4"></div>
    </div>
    <div class="form-group">
        <div class="col-sm-12">
            &nbsp;
        </div>
    </div>
    <div class="form-group">
        @Html.LabelFor(m => m.Result, "Final result*", new { @class = "col-sm-3 control-label" })
        <div class="col-sm-3">
            @{
    var htmlAttributes = new Dictionary<string, object>
                    {
                    {"class", "form-control"}
                    };
    if (Model.State == MatchState.Finalized)
    {
        htmlAttributes.Add("disabled", "disabled");
    }
            }
            @Html.DropDownListFor(m => m.Result, Model.Result.ToSelectList(Model), htmlAttributes)
        </div>
        <div class="col-sm-2">@Html.ValidationMessageFor(m => m.Result)</div>
        <div class="col-sm-4"><span class="help-block">* = after extra time or penalties</span></div>
    </div>
    <div class="form-group">
        <div class="col-sm-12">
            &nbsp;
        </div>
    </div>
    <div class="form-group">
        @Html.LabelFor(m => m.YellowCards, "Yellow cards*", new { @class = "col-sm-3 control-label" })
        <div class="col-sm-3">
            @Html.BootstrapEditorFor(m => m.YellowCards, Model.State != MatchState.Finalized)
        </div>
        <div class="col-sm-2">@Html.ValidationMessageFor(m => m.YellowCards)</div>
        <div class="col-sm-4"></div>
    </div>
    <div class="form-group">
        @Html.LabelFor(m => m.RedCards, "Red cards*", new { @class = "col-sm-3 control-label" })
        <div class="col-sm-3">
            @Html.BootstrapEditorFor(m => m.RedCards, Model.State != MatchState.Finalized)
        </div>
        <div class="col-sm-2">@Html.ValidationMessageFor(m => m.RedCards)</div>
        <div class="col-sm-4"></div>
    </div>
    <div class="form-group">
        <div class="col-sm-offset-3 col-sm-9">
            <button type="submit" class="btn btn-primary">Save</button>
        </div>
    </div>
}
&nbsp;
<div class="btn-group btn-group-justified">
    @Html.ActionLink("Previous match", "Edit", "AdminMatches", new { id = ViewBag.PreviousMatchId }, new { @class = "btn btn-info btn-group" })
    @Html.ActionLink("Back to list", "Index", "AdminMatches", new { @class = "btn btn-info btn-group" })
    @Html.ActionLink("Next match", "Edit", "AdminMatches", new { id = ViewBag.NextMatchId }, new { @class = "btn btn-info btn-group" })
</div>
