@using GridMvc.Html
@using WorldCup.Common.Entities
@using WorldCup.Extensions
@model MatchPrediction

@{
    ViewBag.Title = string.Format("{0} vs {1} predictions", Model.Match.HomeTeam.Name, Model.Match.AwayTeam.Name);
}

<div class="row">
    <div class="col-md-6">
        <h2>
            Match prediction<br>
            <small>@Model.Match.HomeTeam.Name vs @Model.Match.AwayTeam.Name <span class="badge">@Model.Match.Stage.DisplayName()</span></small>
        </h2>
    </div>
    <div class="col-md-6 text-right">
        <hr style="border-color: #fff">
        <h4>
            <span id="match-date">@Model.Match.Date</span>
            <br />
            <small>your local time</small>
        </h4>
    </div>
</div>

<hr class="divider" />
@using (Html.BeginForm("MatchPrediction", "Predictions", FormMethod.Post, new { role = "form", @class = "form-horizontal" }))
{
    @Html.HiddenFor(m => m.MatchPredictionId)
    @Html.HiddenFor(m => m.MatchId)

    <div class="form-group">
        <div class="col-xs-offset-6 col-md-offset-4 col-xs-3 col-md-2 text-center">@Html.Partial("_TeamFlag", new[] { Model.Match.HomeTeam.Code, Model.Match.HomeTeam.Name })</div>
        <div class="col-xs-3 col-md-offset-1 col-md-2 text-center">@Html.Partial("_TeamFlag", new[] { Model.Match.AwayTeam.Code, Model.Match.AwayTeam.Name })</div>
        <div class="hidden-xs col-md-3"></div>
    </div>

    <div class="form-group">
        <label class="col-xs-6 col-md-4 control-label">Half time score</label>
        <div class="col-xs-3 col-md-2">@Html.BootstrapEditorFor(m => m.HomeTeamHalfTimeGoals)</div>
        <div class="hidden-xs hidden-sm col-md-1 text-center">-</div>
        <div class="col-xs-3 col-md-2">@Html.BootstrapEditorFor(m => m.AwayTeamHalfTimeGoals)</div>
        <div class="col-xs-12 col-md-3"><span class="help-block">@Html.ValidationMessageFor(m => m.HomeTeamHalfTimeGoals) @Html.ValidationMessageFor(m => m.AwayTeamHalfTimeGoals)</span></div>
    </div>

    <div class="form-group">
        <label class="col-xs-6 col-md-4 control-label">Full time score</label>
        <div class="col-xs-3 col-md-2">@Html.BootstrapEditorFor(m => m.HomeTeamFullTimeGoals)</div>
        <div class="hidden-xs hidden-sm col-md-1 text-center"><label class="control-label">-</label></div>
        <div class="col-xs-3 col-md-2">@Html.BootstrapEditorFor(m => m.AwayTeamFullTimeGoals)</div>
        <div class="col-xs-12 col-md-3"><span class="help-block">@Html.ValidationMessageFor(m => m.HomeTeamFullTimeGoals) @Html.ValidationMessageFor(m => m.AwayTeamFullTimeGoals)</span></div>
    </div>

    <div class="form-group">
        @Html.LabelFor(m => m.Result, "Winner", new { @class = "col-xs-6 col-md-4 control-label" })
        <div class="col-xs-6 col-md-5" id="result-buttons">
            @Html.DropDownListFor(m => m.Result, Model.Result.ToSelectList(Model.Match), new { @class = "form-control" })
        </div>
        <div class="hidden-xs col-md-3"></div>
    </div>

    <hr class="divider" />

    <div class="form-group">
        @Html.LabelFor(m => m.YellowCards, "Total yellow cards", new { @class = "col-xs-6 col-md-4 control-label" })
        <div class="col-xs-6 col-md-1 col-md-offset-2 text-center">@Html.BootstrapEditorFor(m => m.YellowCards)</div>
        <div class="col-xs-12 col-md-3 col-md-offset-2"><span class="help-block">@Html.ValidationMessageFor(m => m.YellowCards)</span></div>
    </div>

    <div class="form-group">
        @Html.LabelFor(m => m.RedCards, "Total red cards", new { @class = "col-xs-6 col-md-4 control-label" })
        <div class="col-xs-6 col-md-1 col-md-offset-2 text-center">@Html.BootstrapEditorFor(m => m.RedCards)</div>
        <div class="col-xs-12 col-md-3 col-md-offset-2"><span class="help-block">@Html.ValidationMessageFor(m => m.RedCards)</span></div>
    </div>

    <hr class="divider" />

    <div class="btn-group btn-group-justified visible-xs visible-sm">
        <div class="btn-group">
            <button type="submit" class="btn btn-success">Save</button>
        </div>
    </div>

    <div class="hidden-xs hidden-sm text-center col-md-offset-1">
        <button type="submit" class="btn btn-success btn-lg">Save</button>
    </div>
}
&nbsp;
@{
    object previousMatchHtmlAttributes, nextMatchHtmlAttributes;
    if (Model.MatchId != ViewBag.PreviousMatchId)
    {
        previousMatchHtmlAttributes = new { @class = "btn btn-info btn-group" };
    }
    else
    {
        previousMatchHtmlAttributes = new { @class = "btn btn-info btn-group", disabled = "disabled" };
    }
    if (Model.MatchId != ViewBag.NextMatchId)
    {
        nextMatchHtmlAttributes = new { @class = "btn btn-info btn-group" };
    }
    else
    {
        nextMatchHtmlAttributes = new { @class = "btn btn-info btn-group", disabled = "disabled" };
    }
}
<div class="visible-xs visible-sm">
    <div class="btn-group btn-group-justified">
        @Html.ActionLink("Previous match", "MatchPrediction", "Predictions", new { id = ViewBag.PreviousMatchId }, previousMatchHtmlAttributes)
        @Html.ActionLink("Back to list", "Index", "Predictions", new { @class = "btn btn-info btn-group" })
        @Html.ActionLink("Next match", "MatchPrediction", "Predictions", new { id = ViewBag.NextMatchId }, nextMatchHtmlAttributes)
    </div>
</div>
<div class="hidden-xs hidden-sm">
    <div class="row">
        <div class="col-md-5 col-md-offset-4">
            <div class="btn-group btn-group-justified">
                @Html.ActionLink("Previous match", "MatchPrediction", "Predictions", new { id = ViewBag.PreviousMatchId }, previousMatchHtmlAttributes)
                @Html.ActionLink("Back to list", "Index", "Predictions", new { @class = "btn btn-info btn-group" })
                @Html.ActionLink("Next match", "MatchPrediction", "Predictions", new { id = ViewBag.NextMatchId }, nextMatchHtmlAttributes)
            </div>
        </div>
    </div>
</div>
<hr>
<button type="button" class="btn btn-primary" data-toggle="collapse" data-target="#demo">
    previous matches from @Model.Match.HomeTeam.Name and @Model.Match.AwayTeam.Name
</button>

@{
    var gridModel = (List<Match>) ViewBag.GridModel;
    if (gridModel != null)
    {
        <div id="demo" class="collapse">

            @Html.Grid(gridModel).Named("previousMatches").Columns(columns =>
            {
                columns.Add(m => m.Date).Titled("Date").SetWidth(10);
                columns.Add(m => m.HomeTeam.Name).Titled("Home Team").SetWidth(30);
                columns.Add()
                    .Encoded(false)
                    .Sanitized(false)
                    .RenderValueAs(m => string.Format("{0}-{1}", m.HomeTeamFullTimeGoals, m.AwayTeamFullTimeGoals))
                    .Titled("Score")
                    .SetWidth(10);
                columns.Add(m => m.AwayTeam.Name).Titled("Away Team").SetWidth(30);
                columns.Add(m => m.YellowCards).Titled("Yellow Cards").SetWidth(10);
                columns.Add(m => m.RedCards).Titled("Red Cards").SetWidth(10);
            })
        </div>
    }
}

<script type="text/javascript">

    $(function () {

        // Match date
        $("#match-date").text(moment.utc("@Model.Match.Date", "M/D/YYYY h:mm:ss A").local().format("dddd, MMMM Do YYYY [at] HH:mm"));


        // Temporary solution to replace the dropdown with a button bar, to be removed when normal radio buttons are in place or a better solution.
        var result = $("#Result");

        if (result) {
            var buttonGroup = $('<div class="btn-group btn-group-justified" data-toggle="buttons"></div>');

            $.map($("option", result), function (element) {
                var button = $('<label class="btn btn-default"><input type="radio" name="' + result.attr("name") + '" value="' + element.value + '">' + element.text + '</label>').appendTo(buttonGroup);

                if (element.selected) {
                    button.addClass("active");
                    $("input", button).prop("checked", true);
                }
            });

            buttonGroup.appendTo("#result-buttons");
            result.remove();
        }

        // Check for unsaved changes
        $(":submit").click(function () {
            formModification = false;
        });

        var unloadPreventor = function () {
            if (formModification === true) {
                return "Warning: You may have unsaved changes on this page. Press cancel and then the 'Save' button at the bottom of this page before leaving.";
            }
        };

        $(window).bind('beforeunload', unloadPreventor);

        var formModification = false;

        $('form *').change(function () {
            formModification = true;
        });

    });

</script>